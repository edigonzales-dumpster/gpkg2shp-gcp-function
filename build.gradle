plugins {
    id 'java-library'
    id 'org.unbroken-dome.test-sets' version '3.0.1'
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

apply from: "$rootDir/gradle/versioning.gradle"

repositories {
    maven { 
        url "https://repo.osgeo.org/repository/release/" 
    }
    maven {
        url "http://maven.geo-solutions.it"
    }
    maven {
        url "http://jars.interlis.ch"
    }
    maven {
        url "https://dl.bintray.com/sogis/iox-wkf/"
    }
    jcenter()    
    mavenCentral()
}

testSets {
    integrationTest { dirName = 'integration-test' }
}

configurations {
    invoker

    // TODO: Funktioniert nur ohne 'module' !?
    compile {
        exclude group: 'javax.media' //, module:'jai-core'
        exclude group: 'com.sun.media' //, module:'jai-codec'
    }
    
    //integrationTestCompile.extendsFrom testCompile
    //integrationTestRuntime.extendsFrom testRuntime    
}

/*
sourceSets {

    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')
        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
        runtimeClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testRuntime
    }  
}
*/  

dependencies {
    implementation 'ch.interlis:iox-wkf:1.1.20' 
    implementation 'com.google.cloud.functions:functions-framework-api:1.0.1'
    invoker 'com.google.cloud.functions.invoker:java-function-invoker:1.0.0-beta1'
    
    testImplementation 'junit:junit:4.13'
    testImplementation 'org.mockito:mockito-core:3.3.3' 
    testImplementation 'org.geotools:gt-shapefile:23.1' 
    testImplementation 'org.geotools:gt-epsg-hsql:23.1'
    
    integrationTestImplementation 'io.rest-assured:rest-assured:4.3.0'
}

tasks.register("runFunction", JavaExec) {
    main = 'com.google.cloud.functions.invoker.runner.Invoker'
    classpath(configurations.invoker)
    inputs.files(configurations.runtimeClasspath, sourceSets.main.output)
    args(
            '--target', project.findProperty('runFunction.target') ?: "ch.so.agi.functions.Gpkg2Shp",
            '--port', project.findProperty('runFunction.port') ?: 8080
    )
    doFirst {
        args('--classpath', files(configurations.runtimeClasspath, sourceSets.main.output).asPath)
    }
}

shadowJar {
   baseName = 'gpkg2shp-gcp-function'
   classifier = 'all'
   archiveVersion = ''
}


/*
task integrationTest(type: Test) {
    group 'Verification'
    description 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}
*/
